/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class TreeTraversal  extends DepthFirstAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProg().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProg(AProg node)
    {
        defaultIn(node);
    }

    public void outAProg(AProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        inAProg(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProg(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getThen());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getElse());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAIfStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getBody());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAWhileStmt(node);
    }

    public void inAFuncCallStmt(AFuncCallStmt node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStmt(AFuncCallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallStmt(AFuncCallStmt node)
    {
        inAFuncCallStmt(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubExpr(node);
    }

    public void inAMultExpr(AMultExpr node)
    {
        defaultIn(node);
    }

    public void outAMultExpr(AMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        inAMultExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultExpr(node);
    }

    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExpr(node);
    }

    public void inAModExpr(AModExpr node)
    {
        defaultIn(node);
    }

    public void outAModExpr(AModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        inAModExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModExpr(node);
    }

    public void inAFuncCallExpr(AFuncCallExpr node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExpr(AFuncCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallExpr(AFuncCallExpr node)
    {
        inAFuncCallExpr(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallExpr(node);
    }

    public void inALValueExpr(ALValueExpr node)
    {
        defaultIn(node);
    }

    public void outALValueExpr(ALValueExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValueExpr(ALValueExpr node)
    {
        inALValueExpr(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outALValueExpr(node);
    }

    public void inACharnumExpr(ACharnumExpr node)
    {
        defaultIn(node);
    }

    public void outACharnumExpr(ACharnumExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharnumExpr(ACharnumExpr node)
    {
        inACharnumExpr(node);
        if(node.getLiteralChar() != null)
        {
            node.getLiteralChar().apply(this);
        }
        outACharnumExpr(node);
    }

    public void inANumberExpr(ANumberExpr node)
    {
        defaultIn(node);
    }

    public void outANumberExpr(ANumberExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpr(ANumberExpr node)
    {
        inANumberExpr(node);
        if(node.getLiteralNum() != null)
        {
            node.getLiteralNum().apply(this);
        }
        outANumberExpr(node);
    }

    public void inANegativeExpr(ANegativeExpr node)
    {
        defaultIn(node);
    }

    public void outANegativeExpr(ANegativeExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeExpr(ANegativeExpr node)
    {
        inANegativeExpr(node);
        if(node.getNegative() != null)
        {
            node.getNegative().apply(this);
        }
        outANegativeExpr(node);
    }

    public void inAAndCond(AAndCond node)
    {
        defaultIn(node);
    }

    public void outAAndCond(AAndCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCond(AAndCond node)
    {
        inAAndCond(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAndCond(node);
    }

    public void inAOrCond(AOrCond node)
    {
        defaultIn(node);
    }

    public void outAOrCond(AOrCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCond(AOrCond node)
    {
        inAOrCond(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOrCond(node);
    }

    public void inAExprCond(AExprCond node)
    {
        defaultIn(node);
    }

    public void outAExprCond(AExprCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCond(AExprCond node)
    {
        inAExprCond(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAExprCond(node);
    }

    public void inANegativeCond(ANegativeCond node)
    {
        defaultIn(node);
    }

    public void outANegativeCond(ANegativeCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeCond(ANegativeCond node)
    {
        inANegativeCond(node);
        if(node.getNegative() != null)
        {
            node.getNegative().apply(this);
        }
        outANegativeCond(node);
    }

    public void inAIdLValue(AIdLValue node)
    {
        defaultIn(node);
    }

    public void outAIdLValue(AIdLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLValue(AIdLValue node)
    {
        inAIdLValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getEpxrs());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAIdLValue(node);
    }

    public void inAStringLValue(AStringLValue node)
    {
        defaultIn(node);
    }

    public void outAStringLValue(AStringLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLValue(AStringLValue node)
    {
        inAStringLValue(node);
        if(node.getLiteralString() != null)
        {
            node.getLiteralString().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getEpxrs());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAStringLValue(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getFuncId() != null)
        {
            node.getFuncId().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getArgs());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncCall(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getFuncId() != null)
        {
            node.getFuncId().apply(this);
        }
        {
            List<PParam> copy = new ArrayList<PParam>(node.getParams());
            for(PParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        outAHeader(node);
    }

    public void inADataTypeRetType(ADataTypeRetType node)
    {
        defaultIn(node);
    }

    public void outADataTypeRetType(ADataTypeRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypeRetType(ADataTypeRetType node)
    {
        inADataTypeRetType(node);
        if(node.getDtype() != null)
        {
            node.getDtype().apply(this);
        }
        outADataTypeRetType(node);
    }

    public void inANothingRetType(ANothingRetType node)
    {
        defaultIn(node);
    }

    public void outANothingRetType(ANothingRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingRetType(ANothingRetType node)
    {
        inANothingRetType(node);
        if(node.getDtype() != null)
        {
            node.getDtype().apply(this);
        }
        outANothingRetType(node);
    }

    public void inAIntDataType(AIntDataType node)
    {
        defaultIn(node);
    }

    public void outAIntDataType(AIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        inAIntDataType(node);
        if(node.getKeywordInt() != null)
        {
            node.getKeywordInt().apply(this);
        }
        outAIntDataType(node);
    }

    public void inACharDataType(ACharDataType node)
    {
        defaultIn(node);
    }

    public void outACharDataType(ACharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        inACharDataType(node);
        if(node.getKeywordChar() != null)
        {
            node.getKeywordChar().apply(this);
        }
        outACharDataType(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        if(node.getKeywordRef() != null)
        {
            node.getKeywordRef().apply(this);
        }
        {
            List<TId> copy = new ArrayList<TId>(node.getParametersoftype());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParamtype() != null)
        {
            node.getParamtype().apply(this);
        }
        outAParam(node);
    }

    public void inAFparType(AFparType node)
    {
        defaultIn(node);
    }

    public void outAFparType(AFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparType(AFparType node)
    {
        inAFparType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getTokenEmptymatr() != null)
        {
            node.getTokenEmptymatr().apply(this);
        }
        {
            List<TLiteralNum> copy = new ArrayList<TLiteralNum>(node.getLiteralNum());
            for(TLiteralNum e : copy)
            {
                e.apply(this);
            }
        }
        outAFparType(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        {
            List<TLiteralNum> copy = new ArrayList<TLiteralNum>(node.getLiteralNum());
            for(TLiteralNum e : copy)
            {
                e.apply(this);
            }
        }
        outAType(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getVariables());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVarDef(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDefList());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getBlock());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncDef(node);
    }

    public void inAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        inAFuncDefLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAFuncDefLocalDef(node);
    }

    public void inAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        inAFuncDeclLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFuncDeclLocalDef(node);
    }

    public void inAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefLocalDef(AVarDefLocalDef node)
    {
        inAVarDefLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAVarDefLocalDef(node);
    }
}
